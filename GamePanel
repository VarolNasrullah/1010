
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Font;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.geom.Rectangle2D;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;


public class GamePanel extends TenTenPanel
      implements ActionListener
{
  private final int ROWS = 10, COLS = 10; // Grid dimensions

  //private TenTen game;
  //private TenTenCharMatrix charMatrix;
  private ScoreDisplay scoreDisplay;
  private Piece piece;
  private boolean isPieceSelected;
  //private JPanel[][] squares;
  private int[][] mouseClickLocation;
  private int mouseX;
  private int mouseY;
  private int gridMouseX;
  private int gridMouseY;

  public GamePanel()
  {
	 super(10,10);
	 this.addMouseListener(new GameMouseListener(this));
     
  }

  public void setScoreDisplay(ScoreDisplay display)
  {
    scoreDisplay = display;
    //scoreDisplay.update(score);
  }

 

//someone has to tell the piece that it's selected, and what piece it is
//  each piece has an origin or special square. If the mouse is in a given
  //square, you ahve to figure out what square it's in. 
  //then you need a method that says if a piece is selected.
  //use the information in the piece class to determine if the piece fits
  //method to return a boolean that says pieceFits(); it just checks
  //if it does fit, it should paint in the new piece into the space
  


 


 
  /***  Graphics display methods ***/

  public void paintComponent(Graphics g)
  {
    super.paintComponent(g);
    
    drawCharMatrix(g);
    drawPiece(g);
  }

 
 public void mouseClicked(MouseEvent e){
		  mouseX=e.getX();
		  mouseY=e.getY();
	  }
  
  
  public boolean pieceSelected(){
	  return isPieceSelected;
  }
  
  
  
  public void drawPiece(Graphics g)
  {
	  if (this.pieceSelected())
	  {
		  //drawCube(g, piece.getX() + X_LEFT, piece.getY(), piece.getLetter());
		  if(this.pieceFits())
		  {
			  // get which square we are pointing at...
			  // ask mouse listener for coordinates and 
			  // do math magic to convert to squares...
			  
			  
			 // loop through the coordsTable... check each square in charMatrix relative to coords table.
			  //it does fit...
			  //color the squares the new color 
			  for (int i=0; i< Piece.coordsTable.length; i++)
			  {
				  setSquareColor(gridMouseX+piece.getCoords()[i][0], gridMouseY+piece.getCoords()[i][1], piece.getColor());
			  }
		  }
	  }
    
  }

  private boolean pieceFits() {
	// TODO Auto-generated method stub
	  gridMouseX = (this.mouseX)*20;
	  gridMouseY= (this.mouseY)*20;
	  for (int i=0; i< piece.getLength(); i++)
	  {
		  if (!this.getCharMatrix().isEmpty(gridMouseX+piece.getCoords()[i][0], gridMouseY+piece.getCoords()[i][1]))
		  {
			  return false;
		  }
	  }
	  return true;
}

private void drawCharMatrix(Graphics g)
  {
	  for (int i = 0; i<ROWS; i++)
	  {
		  for (int j=0; j<COLS; j++)
		  {
			  switch(this.getCharMatrix().charAt(i, j))
			  {
			  case ('c'):
				setSquareColor(j,i,Color.CYAN);
			  	break;
			  case (' '):
			  	setSquareColor(j,i,Color.WHITE);
			    break;
			  case ('g'): 
			  	setSquareColor(j,i,Color.GREEN);
			  	break;
			  case ('b'):
				setSquareColor(j,i,Color.BLUE);
				 break;
			  case ('m'):
				 setSquareColor(j,i,Color.MAGENTA);
				 break;
			  case ('o'):
				 setSquareColor(j,i,Color.ORANGE);
				 break;
			  case ('r'):
				 setSquareColor(j,i,Color.RED);
				 break;
			  case ('y'):
				 setSquareColor(j,i,Color.YELLOW);
				 break;
			  case ('z'):
				 setSquareColor(j,i,Color.GRAY);
				 break;
			  case ('p'):
					 setSquareColor(j,i,Color.PINK);
					 break;
			  }
		  }
	  }

	  // First go through the char matrix and set the color of
	  // squares 
  }
  private void setSquareColor(int x, int y, Color color)
  {
	  this.getSquares()[x][y].setBackground(color);
  }

  public static void main(String[] args)
  {
	  JFrame frame = new JFrame("panel test");
	  frame.setBounds(100,100,400,425);
	  // build a random charmatrix
	  // test your drawing...
	  GamePanel panel= new GamePanel();
	  Container c = frame.getContentPane();
	  c.add(panel);
	  frame.setVisible(true);
	  TenTenCharMatrix matrix = panel.getCharMatrix();
	  Piece piece=Piece.setRandomShape();
	  matrix.setPiece(piece, 3, 3);
	  matrix.setCharAt(3, 3, 'b');
	  
	  matrix.setCharAt(3, 4, 'c');
	  
	  panel.repaint();
	  System.out.print(matrix);
	  
  }
public int getGridMouseX() {
	return gridMouseX;
}

public void setGridMouseX(int gridMouseX) {
	this.gridMouseX = gridMouseX;
}

public int getGridMouseY() {
	return gridMouseY;
}

public void setGridMouseY(int gridMouseY) {
	this.gridMouseY = gridMouseY;
}

@Override
public void actionPerformed(ActionEvent e) {
	// TODO Auto-generated method stub
	
}
}
